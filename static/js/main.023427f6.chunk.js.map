{"version":3,"sources":["utilities/loadCSVData.js","services/routing/distanceFromStop.js","components/TrainMap.js","components/FullHeight.js","App.js","serviceWorker.js","index.js"],"names":["toCamelCase","str","replace","_","ch","toUpperCase","routeToStops","routeStopData","stopToRoutes","stops","csvData","keys","fieldNames","map","table","row","res","forEach","value","i","key","loadCSVData","stopsCSV","relevantStopIds","Set","Object","relevantStops","filter","_ref","stopId","has","colorMap","ppDestinations","n","withAre","nPretty","String","destinations","are","react_default","a","createElement","Center","TrainMap","state","selectedStopId","selectedStopName","steps","handlePressStop","stopName","_this","setState","handleChooseSteps","renderStops","_ref2","toStop","_ref3","stopLat","stopLon","radius","CircleMarker","center","color","Popup","onOpen","renderRoutesForStop","_ref4","toRoute","sort","b","routeId","Polyline","positions","_ref5","lat","lon","interactive","renderStepButtons","style","position","bottom","left","zIndex","Label","basic","pointing","marginRight","Button","Group","widths","active","backgroundColor","onClick","renderInfoBox","_ref6","distanceFreq","distanceFreqSum","values","v","top","right","width","Segment","this","distance","visited","queue","_loop","s","shift","push","length","distanceFromStop","height","Map","zoom","TileLayer","attribution","url","Component","FullHeight","children","window","innerHeight","App","components_FullHeight","components_TrainMap","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.023427f6.chunk.js","sourcesContent":["const toCamelCase = str => str.replace(/_(\\w)/g, (_, ch) => ch.toUpperCase());\n\nexport default function loadCSVData(csvData) {\n  const keys = csvData.fieldNames.map(toCamelCase);\n  return csvData.table.map((row) => {\n    const res = {};\n    row.forEach((value, i) => {\n      const key = keys[i];\n      res[key] = value;\n    });\n    return res;\n  });\n}\n","import routeStopData from '../../data/route-stop-map.json';\n\nconst { routeToStops, stopToRoutes } = routeStopData;\n\nexport default function distanceFromStop(stopId) {\n  const visited = new Set();\n\n  const toStop = {}, toRoute = {};\n  toStop[stopId] = 0;\n\n  // BFS from `stopId`\n  const queue = [stopId];\n  while (queue.length > 0) {\n    const s = queue.shift();\n    if (visited[s]) continue;\n    visited[s] = true;\n\n    const routes = stopToRoutes[s];\n    routes.forEach((routeId) => {\n      if (toRoute[routeId] == null) {\n        toRoute[routeId] = toStop[s];\n      }\n      routeToStops[routeId].forEach(({ stopId: n }) => {\n        if (toStop[n] == null) {\n          toStop[n] = toStop[s] + 1;\n          queue.push(n);\n        }\n      });\n    });\n  }\n\n  return { toStop, toRoute };\n}\n","import React, { Component } from 'react';\nimport { Button, Label, Segment } from 'semantic-ui-react';\nimport { CircleMarker, Map, TileLayer, Polyline, Popup } from 'react-leaflet';\nimport loadCSVData from '../utilities/loadCSVData';\nimport distanceFromStop from '../services/routing/distanceFromStop';\nimport stopsCSV from '../data/stops.json';\nimport routeStopData from '../data/route-stop-map.json';\n\nconst { routeToStops, stopToRoutes } = routeStopData;\nconst stops = loadCSVData(stopsCSV);\n\nconst relevantStopIds = new Set(Object.keys(stopToRoutes));\nconst relevantStops = stops.filter(({ stopId }) => relevantStopIds.has(stopId));\n\nconst colorMap = [\n  '#00cc00', // 0\n  '#ffaa00', // 1\n  '#cc0000', // 2\n  '#0066ff', // 3\n  '#999999', // 4\n];\n\nconst ppDestinations = (n, withAre) => {\n  const nPretty = n === 0 ? 'No' : String(n);\n  const destinations = n === 1 ? 'destination' : 'destinations';\n  const are = withAre ? (n === 1 ? 'is' : 'are') : '';\n  return (\n    <span><strong>{nPretty}</strong> {destinations} {are}</span>\n  );\n}\n\nconst Center = [61.500, 14.500];\nconst Zoom = 6;\n\nclass TrainMap extends Component {\n  state = {\n    selectedStopId: null,\n    selectedStopName: null,\n    steps: 1,\n  }\n\n  handlePressStop = (stopId, stopName) => {\n    this.setState({ selectedStopId: stopId, selectedStopName: stopName });\n  }\n\n  handleChooseSteps = (n) => {\n    this.setState({ steps: n });\n  }\n\n  renderStops = ({ toStop }) => {\n    return relevantStops.map(({ stopId, stopLat, stopLon, stopName }) => {\n      const dist = toStop[stopId];\n      const color = '#999';\n      const radius = dist === 0 ? 5 : 2;\n      return (\n        <CircleMarker\n          center={[stopLat, stopLon]}\n          key={stopId}\n          radius={radius}\n          color={color}\n        >\n          <Popup onOpen={() => this.handlePressStop(stopId, stopName)}>{ stopName }</Popup>\n        </CircleMarker>\n      );\n    });\n  }\n\n  renderRoutesForStop = ({ toRoute }) => {\n    const { steps } = this.state;\n    const routesToRender = Object.keys(toRoute)\n      .filter(n => toRoute[n] < steps)\n      .sort((a, b) => toRoute[b] - toRoute[a]);\n    return routesToRender.map(routeId => (\n        <Polyline\n          key={routeId}\n          color={colorMap[toRoute[routeId]] || '#999'}\n          positions={routeToStops[routeId].map(({ lat, lon }) => [lat, lon])}\n          interactive={false}\n        />\n      ));\n    }\n\n  renderStepButtons = () => {\n    const { steps } = this.state;\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          bottom: 14,\n          left: 14,\n          zIndex: 1000000,\n        }}\n      >\n        <Label basic color=\"red\" pointing='right' style={{ marginRight: 14 }}>\n          # Trains away\n        </Label>\n        <Button.Group widths={1}>\n          {\n            [1, 2, 3, 4, 5].map(n => (\n              <Button\n                key={n}\n                active={n === steps}\n                style={{\n                  color: n === steps ? '#eee' : colorMap[n - 1],\n                  backgroundColor: n === steps ? colorMap[n - 1] : '#eee',\n                }}\n                onClick={() => this.handleChooseSteps(n)}\n              >\n                {n}\n              </Button>\n            ))\n          }\n        </Button.Group>\n      </div>\n    );\n  }\n\n  renderInfoBox = ({ toStop }) => {\n    const { selectedStopName } = this.state;\n\n    const distanceFreq = {};\n    let distanceFreqSum = 0;\n    Object.values(toStop).forEach((v) => {\n      distanceFreq[v] = (distanceFreq[v] || 0) + 1;\n      distanceFreqSum += 1;\n    });\n\n    // Don't count the originating station\n    distanceFreqSum -= 1;\n\n    return (\n      <div\n        style={{\n          position: 'absolute',\n          top: 14,\n          right: 14,\n          width: 400,\n          zIndex: 1000000,\n        }}\n      >\n        <Segment>\n          {\n            selectedStopName == null &&\n            <div>\n              <p>\n                <strong>Welcome!</strong> Press a station marker to show all\n                routes passing through this stop.\n              </p>\n              <p>\n                Choose in the bottom left to select how many trains away you\n                want to show routes for.\n              </p>\n              <p>\n                <strong>Example:</strong> Three trains away means you have to\n                make two changes to reach this destination, minimum.\n              </p>\n            </div>\n          }\n          {\n            selectedStopName != null &&\n            <div>\n              <p>\n                From <strong>{selectedStopName}</strong> you can reach <strong>{distanceFreqSum}</strong> destinations.\n              </p>\n              <p>\n                Out of these,\n              </p>\n              <ul>\n                <li>{ppDestinations(distanceFreq[1] || 0)} can be reached <strong style={{ color: colorMap[0] }}>directly</strong></li>\n                <li>{ppDestinations(distanceFreq[2] || 0, true)} are <strong style={{ color: colorMap[1] }}>two</strong> trains away</li>\n                <li>{ppDestinations(distanceFreq[3] || 0, true)} are <strong style={{ color: colorMap[2] }}>three</strong> trains away</li>\n                <li>{ppDestinations(distanceFreq[4] || 0, true)} are <strong style={{ color: colorMap[3] }}>four</strong> trains away</li>\n                <li>{ppDestinations(distanceFreq[5] || 0, true)} are <strong style={{ color: colorMap[4] }}>five</strong> trains away</li>\n              </ul>\n            </div>\n          }\n        </Segment>\n      </div>\n    );\n  }\n\n  render() {\n    const { selectedStopId } = this.state;\n    const distance = selectedStopId == null\n      ? { toStop: {}, toRoute: {} }\n      : distanceFromStop(selectedStopId);\n\n    return (\n      <div style={{ height: '100%' }}>\n        { this.renderStepButtons() }\n        { this.renderInfoBox(distance) }\n        <Map style={{ height: '100%' }} center={Center} zoom={Zoom}>\n          <TileLayer\n            attribution=\"&amp;copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          { this.renderRoutesForStop(distance) }\n          { this.renderStops(distance) }\n        </Map>\n      </div>\n    )\n  }\n}\n\nexport default TrainMap;\n","import React from 'react';\n\nfunction FullHeight({ children }) {\n  const height = window.innerHeight;\n  return (\n    <div style={{ height }}>\n      { children }\n    </div>\n  );\n}\n\nexport default FullHeight;\n","import React, { Component } from 'react';\nimport TrainMap from './components/TrainMap';\nimport FullHeight from './components/FullHeight';\n\nclass App extends Component {\n  render() {\n    return (\n      <FullHeight>\n        <TrainMap />\n      </FullHeight>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}